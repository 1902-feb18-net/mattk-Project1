// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.DataAccess;

namespace Project1.DataAccess.Migrations
{
    [DbContext(typeof(Project1Context))]
    [Migration("20190308201011_GiveLocationAName")]
    partial class GiveLocationAName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project1.DataAccess.Cupcake", b =>
                {
                    b.Property<int>("CupcakeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValueSql("((6.00))");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CupcakeId");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("UQ__Cupcake__F9B8A48B34886670");

                    b.ToTable("Cupcake","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<DateTime>("OrderTime");

                    b.HasKey("OrderId")
                        .HasName("PK__CupcakeO__C3905BCFD43C377E");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("CupcakeOrder","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrderItem", b =>
                {
                    b.Property<int>("CupcakeOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CupcakeId")
                        .HasColumnName("CupcakeID");

                    b.Property<int>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quantity");

                    b.HasKey("CupcakeOrderItemId");

                    b.HasIndex("CupcakeId");

                    b.HasIndex("OrderId", "CupcakeId")
                        .IsUnique()
                        .HasName("OrderToCupcake");

                    b.ToTable("CupcakeOrderItem","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultLocation");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CustomerId");

                    b.HasIndex("DefaultLocation");

                    b.ToTable("Customer","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("IngredientId");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasName("UQ__Ingredie__F9B8A48B8D554271");

                    b.ToTable("Ingredient","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("LocationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("UQ__Location__2HzBmwvgSOEaXvTL")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Location","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.LocationInventory", b =>
                {
                    b.Property<int>("LocationInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("IngredientId")
                        .HasColumnName("IngredientID");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID");

                    b.HasKey("LocationInventoryId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("LocationId", "IngredientId")
                        .IsUnique()
                        .HasName("InventoryIngredient");

                    b.ToTable("LocationInventory","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.RecipeItem", b =>
                {
                    b.Property<int>("RecipeItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 6)");

                    b.Property<int>("CupcakeId")
                        .HasColumnName("CupcakeID");

                    b.Property<int>("IngredientId")
                        .HasColumnName("IngredientID");

                    b.HasKey("RecipeItemId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("CupcakeId", "IngredientId")
                        .IsUnique()
                        .HasName("CupcakeIngredient");

                    b.ToTable("RecipeItem","Project1");
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrder", b =>
                {
                    b.HasOne("Project1.DataAccess.Customer", "Customer")
                        .WithMany("CupcakeOrder")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project1.DataAccess.Location", "Location")
                        .WithMany("CupcakeOrder")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Order_Location")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project1.DataAccess.CupcakeOrderItem", b =>
                {
                    b.HasOne("Project1.DataAccess.Cupcake", "Cupcake")
                        .WithMany("CupcakeOrderItem")
                        .HasForeignKey("CupcakeId")
                        .HasConstraintName("FK_OrderItem_Cupcake")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project1.DataAccess.CupcakeOrder", "Order")
                        .WithMany("CupcakeOrderItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderItem_CupcakeOrder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project1.DataAccess.Customer", b =>
                {
                    b.HasOne("Project1.DataAccess.Location", "DefaultLocationNavigation")
                        .WithMany("Customer")
                        .HasForeignKey("DefaultLocation")
                        .HasConstraintName("FK_Default_Location");
                });

            modelBuilder.Entity("Project1.DataAccess.LocationInventory", b =>
                {
                    b.HasOne("Project1.DataAccess.Ingredient", "Ingredient")
                        .WithMany("LocationInventory")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_Ingredient")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project1.DataAccess.Location", "Location")
                        .WithMany("LocationInventory")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Location")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Project1.DataAccess.RecipeItem", b =>
                {
                    b.HasOne("Project1.DataAccess.Cupcake", "Cupcake")
                        .WithMany("RecipeItem")
                        .HasForeignKey("CupcakeId")
                        .HasConstraintName("FK_Recipe_Cupcake")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Project1.DataAccess.Ingredient", "Ingredient")
                        .WithMany("RecipeItem")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_Recipe_Ingredient")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
